#include <iostream>
#include <string>
#include <unordered_map>
#include <map>
using namespace std;

int main() {
    // Read the entire input as a single string
    string input;
    getline(cin, input); // Get the entire line of input

    // Process the input string into tokens
    unordered_map<string, int> myTokens;
    size_t start = 0;
    size_t end = input.find(' ');

    while (end != string::npos) {
        string token = input.substr(start, end - start);
        myTokens[token]++;
        start = end + 1;
        end = input.find(' ', start);
    }

    // Gets the final token
    myTokens[input.substr(start)]++;

    // Use a map to sort by frequency and alphabetically for ties
    map<int, map<string, int>, greater<int>> sortedTokens; // Nested map
    for (const auto& entry : myTokens) {
        sortedTokens[entry.second][entry.first] = 1; // Store in nested map
    }

    // Print the keys (tokens) sorted by frequency and alphabetically
    for (const auto& freqGroup : sortedTokens) {
        for (const auto& tokenEntry : freqGroup.second) {
            cout << tokenEntry.first << " ";  // Print without adding extra newlines
        }
    }
    cout << endl;
    cout << "**********" << endl;

    // Re-process the input to print token positions
    start = 0;
    end = input.find(' ');

    while (end != string::npos) {
        string token = input.substr(start, end - start);
        int position = 0;
        for (const auto& freqGroup : sortedTokens) {
            for (const auto& tokenEntry : freqGroup.second) {
                if (tokenEntry.first == token) {
                    cout << position + 1 << " ";  // Print positions without newline
                    break;
                }
                position++;
            }
        }
        start = end + 1;
        end = input.find(' ', start);
    }

    // Process the last token after the final space
    string lastToken = input.substr(start);
    int position = 0;
    for (const auto& freqGroup : sortedTokens) {
        for (const auto& tokenEntry : freqGroup.second) {
            if (tokenEntry.first == lastToken) {
                cout << position + 1 << " ";  // Print last token position
                break;
            }
            position++;
        }
    }

    cout << endl;  // Ensure final output ends with a newline

    return 0;
}

// LLM and Debugging
/*
    The main usage of LLM was to help explain how maps work and how to implement them. It explained the basics of maps and created the map
    that would print the position values. I then asked the ai how to sort by both frequency and alphabetically, because the output was not
    sorted alphabetically. The ai created another map and sorted by frequency and alphabetically. The only other issue I had was that the
    position list was off by 1, so I had to add 1 to the position.
*/
